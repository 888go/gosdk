<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7cf4ec06-eee2-4839-8065-b794f402a493" name="更改" comment="2024-04-12">
      <change afterPath="$PROJECT_DIR$/go.sum" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/registry/export_test.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/registry/key.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/registry/registry.rar" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/registry/registry_test.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/registry/syscall.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/registry/value.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/registry/zsyscall_windows.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/翻译/注释/registry/export_test_GO.md" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/翻译/注释/registry/key_GO.md" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/翻译/注释/registry/registry_test_GO.md" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/翻译/注释/registry/value_GO.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/gosdk.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/gosdk.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/DirectoryV3.xml" beforeDir="false" afterPath="$PROJECT_DIR$/DirectoryV3.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.mod" beforeDir="false" afterPath="$PROJECT_DIR$/go.mod" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CoverageOptionsProvider">
    <option name="myAddOrReplace" value="0" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Go Application" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file://C:/Go" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GithubDefaultAccount">
    <option name="defaultAccountId" value="ff08bdde-a4a3-4c26-a175-43cbbefb37c1" />
  </component>
  <component name="GoVcsConfiguration">
    <option name="GO_FMT" value="false" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 7
}</component>
  <component name="ProjectId" id="2eMxYortaB5No0jgIxpg2dIAJTC" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "ASKED_ADD_EXTERNAL_FILES": "true",
    "DefaultGoTemplateProperty": "Go Application",
    "Go 构建.go build github.com/888go/gosdk/exec.executor": "Coverage",
    "Go 构建.go build github.com/888go/gosdk/exec/internal.executor": "Coverage",
    "Go 构建.go build github.com/888go/gosdk/exec/internal/poll.executor": "Coverage",
    "Go 构建.go build github.com/888go/gosdk/registry.executor": "Coverage",
    "Go 构建.go build github.com/888go/gosdk/strings.executor": "Coverage",
    "Go 构建.go build github.com/888go/gosdk/tmp.executor": "Run",
    "Go 构建.go build strings (1).executor": "Coverage",
    "Go 构建.go build strings (2).executor": "Coverage",
    "Go 构建.go build strings.executor": "Coverage",
    "Go 测试.exec_test.go.executor": "Coverage",
    "Go 测试.exec_windows_test.go.executor": "Coverage",
    "Go 测试.github.com/888go/gosdk/exec 中的 BenchmarkExecHostname.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestCatGoodAndBadFile.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestCatStdin.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestCommand.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestCommandRelativeName.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestEcho.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestEchoFileRace.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestExitStatus.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestIgnorePipeErrorOnSuccess.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestLookPath.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestNoExistExecutable.executor": "Coverage",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestNoPath.executor": "Run",
    "Go 测试.github.com/888go/gosdk/exec 中的 TestStdinClose.executor": "Debug",
    "Go 测试.github.com/888go/gosdk/strings 中的 ExampleContainsFunc.executor": "Debug",
    "Go 测试.github.com/888go/gosdk/strings 中的 ExampleFieldsFunc.executor": "Debug",
    "Go 测试.go test exec.executor": "Coverage",
    "Go 测试.go test github.com/888go/gosdk/strings (1).executor": "Coverage",
    "Go 测试.go test github.com/888go/gosdk/strings.executor": "Run",
    "Go 测试.go test registry.executor": "Coverage",
    "Go 测试.go test strings (1).executor": "Coverage",
    "Go 测试.go test strings.executor": "Coverage",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.go.formatter.settings.were.checked": "true",
    "RunOnceActivity.go.migrated.go.modules.settings": "true",
    "RunOnceActivity.go.modules.automatic.dependencies.download": "true",
    "RunOnceActivity.go.modules.go.list.on.any.changes.was.set": "true",
    "git-widget-placeholder": "main",
    "go.import.settings.migrated": "true",
    "go.sdk.automatically.set": "true",
    "ignore.virus.scanning.warn.message": "true",
    "last_opened_file_path": "E:/SVN/GO/code/go_src",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "run.code.analysis.last.selected.profile": "pProject Default",
    "settings.editor.selected.configurable": "org.jetbrains.plugins.github.ui.GithubSettingsConfigurable"
  }
}]]></component>
  <component name="RunManager" selected="Go 测试.go test registry">
    <configuration default="true" type="GoApplicationRunConfiguration" factoryName="Go Application">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="go build github.com/888go/gosdk/registry" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="github.com/888go/gosdk/registry" />
      <directory value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="go build github.com/888go/gosdk/tmp" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="github.com/888go/gosdk/tmp" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/tmp/main.go" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="GoTestRunConfiguration" factoryName="Go Test">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <configuration name="github.com/888go/gosdk/exec 中的 TestIgnorePipeErrorOnSuccess" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$/exec" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="github.com/888go/gosdk/exec" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestIgnorePipeErrorOnSuccess\E$" />
      <method v="2" />
    </configuration>
    <configuration name="go test registry" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$/registry" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="github.com/888go/gosdk/registry" />
      <directory value="$PROJECT_DIR$/registry" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <configuration name="go test strings" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$/strings" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="github.com/888go/gosdk/strings" />
      <directory value="$PROJECT_DIR$/strings" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Go 测试.go test registry" />
        <item itemvalue="Go 构建.go build github.com/888go/gosdk/registry" />
        <item itemvalue="Go 构建.go build github.com/888go/gosdk/tmp" />
        <item itemvalue="Go 测试.github.com/888go/gosdk/exec 中的 TestIgnorePipeErrorOnSuccess" />
        <item itemvalue="Go 测试.go test strings" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-gosdk-2946fb9b3188-155fe4b6e3a0-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-233.15026.17" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="应用程序级" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT" value="false" />
    <option name="CHECK_NEW_TODO" value="false" />
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <MESSAGE value="2024-04-12" />
    <option name="LAST_COMMIT_MESSAGE" value="2024-04-12" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/strings/example_test.go</url>
          <line>84</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/strings/example_test.go</url>
          <line>158</line>
          <option name="timeStamp" value="3" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/gosdk$go_test_github_com_888go_gosdk_strings__1_.out" NAME="go test github.com/888go/gosdk/strings (1) 覆盖结果" MODIFIED="1712970766270" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_registry.out" NAME="go build github.com/888go/gosdk/registry 覆盖结果" MODIFIED="1713366207510" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$exec_windows_test_go.out" NAME="exec_windows_test.go 覆盖结果" MODIFIED="1713263686867" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_strings__1_.out" NAME="go test strings (1) 覆盖结果" MODIFIED="1712978751404" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_exec_internal_poll.out" NAME="go build github.com/888go/gosdk/exec/internal/poll 覆盖结果" MODIFIED="1713262494369" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_strings__2_.out" NAME="go build strings (2) 覆盖结果" MODIFIED="1712935315792" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_exec.out" NAME="go build github.com/888go/gosdk/exec 覆盖结果" MODIFIED="1713276150337" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_registry.out" NAME="go test registry 覆盖结果" MODIFIED="1713366211292" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_strings.out" NAME="go build github.com/888go/gosdk/strings 覆盖结果" MODIFIED="1712970770654" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$github_com_888go_gosdk_exec__TestNoExistExecutable.out" NAME="github.com/888go/gosdk/exec 中的 TestNoExistExecutable 覆盖结果" MODIFIED="1713274379175" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_strings__1_.out" NAME="go build strings (1) 覆盖结果" MODIFIED="1712935233471" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_exec_internal.out" NAME="go build github.com/888go/gosdk/exec/internal 覆盖结果" MODIFIED="1713261948001" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_strings.out" NAME="go build strings 覆盖结果" MODIFIED="1712935189455" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_strings.out" NAME="go test strings 覆盖结果" MODIFIED="1713283144170" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_exec.out" NAME="go test exec 覆盖结果" MODIFIED="1713276153682" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$exec_test_go.out" NAME="exec_test.go 覆盖结果" MODIFIED="1713282853649" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>