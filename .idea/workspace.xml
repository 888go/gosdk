<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7cf4ec06-eee2-4839-8065-b794f402a493" name="更改" comment="2024-05-19">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/bytes/buffer.go" beforeDir="false" afterPath="$PROJECT_DIR$/bytes/buffer.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/bytes/buffer_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/bytes/buffer_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/bytes/bytes.go" beforeDir="false" afterPath="$PROJECT_DIR$/bytes/bytes.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/exec/example_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/exec/example_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/exec/exec.go" beforeDir="false" afterPath="$PROJECT_DIR$/exec/exec.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/exec/exec_posix_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/exec/exec_posix_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/exec/lp.go" beforeDir="false" afterPath="$PROJECT_DIR$/exec/lp.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/fmt/errors.go" beforeDir="false" afterPath="$PROJECT_DIR$/fmt/errors.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/fmt/print.go" beforeDir="false" afterPath="$PROJECT_DIR$/fmt/print.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/fmt/scan.go" beforeDir="false" afterPath="$PROJECT_DIR$/fmt/scan.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/fmt/scan_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/fmt/scan_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/dir.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/dir.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/env.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/env.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/error.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/error.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/exec.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/exec.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/executable.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/executable.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/file.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/file.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/getwd.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/getwd.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/os_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/os_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/os_windows_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/os_windows_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/path.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/path.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/proc.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/proc.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/stat.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/stat.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/sys.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/sys.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/tempfile.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/tempfile.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/os/types.go" beforeDir="false" afterPath="$PROJECT_DIR$/os/types.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/regexp/example_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/regexp/example_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/regexp/regexp.go" beforeDir="false" afterPath="$PROJECT_DIR$/regexp/regexp.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/atob.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/atob.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/atob_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/atob_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/atoc.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/atoc.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/atof.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/atof.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/atoi.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/atoi.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/ctoa.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/ctoa.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/decimal.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/decimal.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/ftoa.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/ftoa.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/itoa.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/itoa.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strconv/quote.go" beforeDir="false" afterPath="$PROJECT_DIR$/strconv/quote.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strings/builder.go" beforeDir="false" afterPath="$PROJECT_DIR$/strings/builder.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strings/clone.go" beforeDir="false" afterPath="$PROJECT_DIR$/strings/clone.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strings/compare.go" beforeDir="false" afterPath="$PROJECT_DIR$/strings/compare.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strings/replace.go" beforeDir="false" afterPath="$PROJECT_DIR$/strings/replace.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strings/strings.go" beforeDir="false" afterPath="$PROJECT_DIR$/strings/strings.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/strings/strings_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/strings/strings_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/time/format.go" beforeDir="false" afterPath="$PROJECT_DIR$/time/format.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/time/sleep.go" beforeDir="false" afterPath="$PROJECT_DIR$/time/sleep.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/time/sleep_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/time/sleep_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/time/tick.go" beforeDir="false" afterPath="$PROJECT_DIR$/time/tick.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/time/time.go" beforeDir="false" afterPath="$PROJECT_DIR$/time/time.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/time/time_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/time/time_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/time/zoneinfo.go" beforeDir="false" afterPath="$PROJECT_DIR$/time/zoneinfo.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/time/zoneinfo_read.go" beforeDir="false" afterPath="$PROJECT_DIR$/time/zoneinfo_read.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/dll_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/dll_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/env_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/env_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/exec_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/exec_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/mkwinsyscall/mkwinsyscall.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/mkwinsyscall/mkwinsyscall.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/registry/key.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/registry/key.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/registry/registry_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/registry/registry_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/registry/syscall.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/registry/syscall.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/registry/value.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/registry/value.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/registry/zsyscall_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/registry/zsyscall_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/security_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/security_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/setupapi_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/setupapi_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/debug/log.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/debug/log.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/debug/service.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/debug/service.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/eventlog/install.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/eventlog/install.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/eventlog/log.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/eventlog/log.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/example/service.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/example/service.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/mgr/config.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/mgr/config.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/mgr/mgr.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/mgr/mgr.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/mgr/recovery.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/mgr/recovery.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/mgr/service.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/mgr/service.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/security.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/security.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/svc/service.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/svc/service.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/syscall.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/syscall.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/syscall_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/syscall_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/syscall_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/syscall_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/syscall_windows_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/syscall_windows_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/types_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/types_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/windows/zsyscall_windows.go" beforeDir="false" afterPath="$PROJECT_DIR$/windows/zsyscall_windows.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/bytes/buffer_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/bytes/buffer_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/bytes/buffer_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/bytes/buffer_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/bytes/buffer_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/bytes/buffer_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/bytes/bytes_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/bytes/bytes_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/bytes/bytes_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/bytes/bytes_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/exec/example_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/exec/example_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/exec/exec_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/exec/exec_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/exec/exec_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/exec/exec_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/exec/lp_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/exec/lp_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/fmt/errors_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/fmt/errors_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/fmt/print_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/fmt/print_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/fmt/print_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/fmt/print_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/fmt/scan_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/fmt/scan_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/fmt/scan_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/fmt/scan_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/dir_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/dir_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/dir_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/dir_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/env_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/env_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/error_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/error_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/error_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/error_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/exec_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/exec_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/exec_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/exec_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/executable_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/executable_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/file_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/file_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/file_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/file_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/getwd_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/getwd_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/os_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/os_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/path_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/path_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/path_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/path_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/proc_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/proc_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/stat_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/stat_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/sys_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/sys_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/tempfile_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/tempfile_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/types_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/types_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/os/types_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/os/types_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/regexp/example_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/regexp/example_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/regexp/regexp_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/regexp/regexp_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/regexp/regexp_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/regexp/regexp_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/regexp/regexp_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/regexp/regexp_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/atob_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/atob_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/atob_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/atob_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/atob_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/atob_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/atoc_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/atoc_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/atof_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/atof_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/atoi_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/atoi_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/atoi_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/atoi_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/ctoa_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/ctoa_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/ftoa_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/ftoa_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/itoa_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/itoa_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strconv/quote_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strconv/quote_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/builder_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/builder_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/builder_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/builder_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/clone_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/clone_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/compare_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/compare_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/replace_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/replace_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/replace_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/replace_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/strings_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/strings_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/strings_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/strings_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/strings/strings_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/strings/strings_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/format_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/format_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/format_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/format_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/sleep_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/sleep_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/sleep_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/sleep_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/tick_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/tick_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/tick_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/tick_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/time_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/time_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/time_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/time_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/time_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/time_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/time_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/time_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/zoneinfo_read_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/zoneinfo_read_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/zoneinfo_其他.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/zoneinfo_其他.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/time/zoneinfo_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/time/zoneinfo_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/dll_windows_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/dll_windows_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/dll_windows_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/dll_windows_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/env_windows_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/env_windows_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/registry/key_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/registry/key_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/registry/key_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/registry/key_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/registry/registry_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/registry/registry_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/registry/value_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/registry/value_方法.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/syscall_windows_test_package.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/syscall_windows_test_package.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/翻译/函数/windows/syscall_windows_方法.md" beforeDir="false" afterPath="$PROJECT_DIR$/翻译/函数/windows/syscall_windows_方法.md" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CoverageOptionsProvider">
    <option name="myAddOrReplace" value="0" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Go Application" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file://C:/Go" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;888go&quot;
  }
}</component>
  <component name="GithubDefaultAccount">
    <option name="defaultAccountId" value="ff08bdde-a4a3-4c26-a175-43cbbefb37c1" />
  </component>
  <component name="GithubPullRequestsUISettings">
    <option name="selectedUrlAndAccountId">
      <UrlAndAccount>
        <option name="accountId" value="ff08bdde-a4a3-4c26-a175-43cbbefb37c1" />
        <option name="url" value="https://github.com/888go/gosdk.git" />
      </UrlAndAccount>
    </option>
  </component>
  <component name="GoVcsConfiguration">
    <option name="GO_FMT" value="false" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$PROJECT_DIR$/windows/exec_windows.go" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/windows/mkwinsyscall/mkwinsyscall.go" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/windows/mkwinsyscall/mkwinsyscall_test.go" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/windows/registry/export_test.go" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/windows/registry/key.go" root0="SKIP_INSPECTION" />
    <setting file="file://$PROJECT_DIR$/windows/registry/registry_test.go" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/windows/testdata/README" root0="FORCE_HIGHLIGHTING" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 7
}</component>
  <component name="ProjectId" id="2eMxYortaB5No0jgIxpg2dIAJTC" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;DefaultGoTemplateProperty&quot;: &quot;Go Application&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk/exec.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk/exec/internal.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk/exec/internal/poll.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk/registry.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk/strings.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk/tmp.executor&quot;: &quot;Run&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk/windows.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build github.com/888go/gosdk/windows/mkwinsyscall.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build strings (1).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build strings (2).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 构建.go build strings.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.exec_test.go.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.exec_windows_test.go.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.github.com/888go/gosdk/bytes 中的 TestNil.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 BenchmarkExecHostname.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestCatGoodAndBadFile.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestCatStdin.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestCommand.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestCommandRelativeName.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestEcho.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestEchoFileRace.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestExitStatus.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestIgnorePipeErrorOnSuccess.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestLookPath.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestNoExistExecutable.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestNoPath.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestOutputStderrCapture.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/exec 中的 TestStdinClose.executor&quot;: &quot;Debug&quot;,
    &quot;Go 测试.github.com/888go/gosdk/fmt 中的 ExampleFprint.executor&quot;: &quot;Debug&quot;,
    &quot;Go 测试.github.com/888go/gosdk/fmt 中的 TestMultiLine.executor&quot;: &quot;Debug&quot;,
    &quot;Go 测试.github.com/888go/gosdk/os 中的 BenchmarkExpand/multiple.executor&quot;: &quot;Debug&quot;,
    &quot;Go 测试.github.com/888go/gosdk/os 中的 TestClearenv.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/os 中的 TestEnvironConsistency.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/os 中的 TestExecutable.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/os 中的 TestLookupEnv.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/os 中的 TestNilProcessStateString.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/os 中的 TestSetenvUnixEinval.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/os 中的 TestUnsetenv.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/strconv 中的 ExampleNumError.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/strconv 中的 TestErrorPrefixes.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/strconv 中的 TestParseBool.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/strings 中的 ExampleContainsFunc.executor&quot;: &quot;Debug&quot;,
    &quot;Go 测试.github.com/888go/gosdk/strings 中的 ExampleFieldsFunc.executor&quot;: &quot;Debug&quot;,
    &quot;Go 测试.github.com/888go/gosdk/strings 中的 TestBuilder.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/time 中的 BenchmarkAfter.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/time 中的 TestFormat.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/time 中的 TestFormatFractionalSecondSeparators.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/time 中的 TestGoString.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/time 中的 TestParseYday.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.github.com/888go/gosdk/time 中的 TestReset.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go test bytes.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test cpu.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test exec.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test fmt (1).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test fmt.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test github.com/888go/gosdk/strings (1).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test github.com/888go/gosdk/strings.executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.go test gosdk.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test internal.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test os (1).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test os.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test regexp.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test registry.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test strconv.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test strings (1).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test strings.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test time (1).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test time.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test windows (1).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test windows (2).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test windows (3).executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.go test windows.executor&quot;: &quot;Coverage&quot;,
    &quot;Go 测试.time 中的 TestFormat (1).executor&quot;: &quot;Run&quot;,
    &quot;Go 测试.time 中的 TestFormat.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.automatic.dependencies.download&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;ToolWindow覆盖率.ShowToolbar&quot;: &quot;false&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,
    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;E:/SVN/GO/code/WanCheng/qmgo&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;go.custom.fmt.functions&quot;
  }
}</component>
  <component name="RunManager" selected="Go 构建.go build github.com/888go/gosdk/tmp">
    <configuration default="true" type="GoApplicationRunConfiguration" factoryName="Go Application">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="go build github.com/888go/gosdk/tmp" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="github.com/888go/gosdk/tmp" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/tmp/main.go" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="GoTestRunConfiguration" factoryName="Go Test">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <configuration name="github.com/888go/gosdk/fmt 中的 ExampleFprint" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$/fmt" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="github.com/888go/gosdk/fmt" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QExampleFprint\E$" />
      <method v="2" />
    </configuration>
    <configuration name="github.com/888go/gosdk/time 中的 BenchmarkAfter" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$/time" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="github.com/888go/gosdk/time" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gobench" />
      <pattern value="^\QBenchmarkAfter\E$" />
      <method v="2" />
    </configuration>
    <configuration name="go test strings" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$/strings" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="github.com/888go/gosdk/strings" />
      <directory value="$PROJECT_DIR$/strings" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <configuration name="go test time" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="gosdk" />
      <working_directory value="$PROJECT_DIR$/time" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="github.com/888go/gosdk/time" />
      <directory value="$PROJECT_DIR$/time" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Go 构建.go build github.com/888go/gosdk/tmp" />
        <item itemvalue="Go 测试.github.com/888go/gosdk/time 中的 BenchmarkAfter" />
        <item itemvalue="Go 测试.github.com/888go/gosdk/fmt 中的 ExampleFprint" />
        <item itemvalue="Go 测试.go test time" />
        <item itemvalue="Go 测试.go test strings" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-gosdk-2946fb9b3188-155fe4b6e3a0-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-233.15026.17" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="应用程序级" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="branch">
                    <value>
                      <list>
                        <option value="origin/main" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT" value="false" />
    <option name="CHECK_NEW_TODO" value="false" />
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <MESSAGE value="2024-04-12" />
    <MESSAGE value="2024.05.18" />
    <MESSAGE value="2024-05-19" />
    <option name="LAST_COMMIT_MESSAGE" value="2024-05-19" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/fmt/example_test.go</url>
          <line>147</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/gosdk$go_test_windows__3_.out" NAME="go test windows (3) 覆盖结果" MODIFIED="1713617204462" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_github_com_888go_gosdk_strings__1_.out" NAME="go test github.com/888go/gosdk/strings (1) 覆盖结果" MODIFIED="1712970766270" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_internal.out" NAME="go test internal 覆盖结果" MODIFIED="1715996066535" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_strconv.out" NAME="go test strconv 覆盖结果" MODIFIED="1716037884861" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_gosdk.out" NAME="go test gosdk 覆盖结果" MODIFIED="1713405393861" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_strings__1_.out" NAME="go test strings (1) 覆盖结果" MODIFIED="1712978751404" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$exec_windows_test_go.out" NAME="exec_windows_test.go 覆盖结果" MODIFIED="1713263686867" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk.out" NAME="go build github.com/888go/gosdk 覆盖结果" MODIFIED="1713405391013" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_exec_internal_poll.out" NAME="go build github.com/888go/gosdk/exec/internal/poll 覆盖结果" MODIFIED="1713262494369" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_exec.out" NAME="go build github.com/888go/gosdk/exec 覆盖结果" MODIFIED="1713276150337" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_registry.out" NAME="go test registry 覆盖结果" MODIFIED="1713367674388" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_strings.out" NAME="go build github.com/888go/gosdk/strings 覆盖结果" MODIFIED="1712970770654" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_windows.out" NAME="go build github.com/888go/gosdk/windows 覆盖结果" MODIFIED="1713617072847" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_time__1_.out" NAME="go test time (1) 覆盖结果" MODIFIED="1714589778091" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_regexp.out" NAME="go test regexp 覆盖结果" MODIFIED="1716037306002" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_strings.out" NAME="go build strings 覆盖结果" MODIFIED="1712935189455" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_fmt.out" NAME="go test fmt 覆盖结果" MODIFIED="1716004311554" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_strings.out" NAME="go test strings 覆盖结果" MODIFIED="1716050357473" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_exec.out" NAME="go test exec 覆盖结果" MODIFIED="1715963506813" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_os__1_.out" NAME="go test os (1) 覆盖结果" MODIFIED="1713895323571" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_registry.out" NAME="go build github.com/888go/gosdk/registry 覆盖结果" MODIFIED="1713366524863" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_bytes.out" NAME="go test bytes 覆盖结果" MODIFIED="1715963497385" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_strings__2_.out" NAME="go build strings (2) 覆盖结果" MODIFIED="1712935315792" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_windows__1_.out" NAME="go test windows (1) 覆盖结果" MODIFIED="1713617013339" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_time.out" NAME="go test time 覆盖结果" MODIFIED="1716051534837" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$github_com_888go_gosdk_exec__TestNoExistExecutable.out" NAME="github.com/888go/gosdk/exec 中的 TestNoExistExecutable 覆盖结果" MODIFIED="1713274379175" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_cpu.out" NAME="go test cpu 覆盖结果" MODIFIED="1713880097909" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_windows.out" NAME="go test windows 覆盖结果" MODIFIED="1713665811444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$github_com_888go_gosdk_bytes__TestNil.out" NAME="github.com/888go/gosdk/bytes 中的 TestNil 覆盖结果" MODIFIED="1714503228481" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_strings__1_.out" NAME="go build strings (1) 覆盖结果" MODIFIED="1712935233471" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_exec_internal.out" NAME="go build github.com/888go/gosdk/exec/internal 覆盖结果" MODIFIED="1713261948001" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_os.out" NAME="go test os 覆盖结果" MODIFIED="1716007500741" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_windows__2_.out" NAME="go test windows (2) 覆盖结果" MODIFIED="1713617160423" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_test_fmt__1_.out" NAME="go test fmt (1) 覆盖结果" MODIFIED="1714505736902" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$exec_test_go.out" NAME="exec_test.go 覆盖结果" MODIFIED="1713282853649" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/gosdk$go_build_github_com_888go_gosdk_windows_mkwinsyscall.out" NAME="go build github.com/888go/gosdk/windows/mkwinsyscall 覆盖结果" MODIFIED="1713521727715" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>